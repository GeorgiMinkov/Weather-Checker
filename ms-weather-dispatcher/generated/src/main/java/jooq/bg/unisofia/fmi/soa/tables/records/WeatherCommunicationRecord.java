/*
 * This file is generated by jOOQ.
 */
package bg.unisofia.fmi.soa.tables.records;


import bg.unisofia.fmi.soa.tables.WeatherCommunication;

import java.time.LocalDate;
import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WeatherCommunicationRecord extends UpdatableRecordImpl<WeatherCommunicationRecord> implements Record5<Integer, String, String, LocalDate, LocalDateTime> {

    private static final long serialVersionUID = -1605797153;

    /**
     * Setter for <code>weather-dispatcher.WEATHER_COMMUNICATION.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>weather-dispatcher.WEATHER_COMMUNICATION.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>weather-dispatcher.WEATHER_COMMUNICATION.CITY</code>.
     */
    public void setCity(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>weather-dispatcher.WEATHER_COMMUNICATION.CITY</code>.
     */
    public String getCity() {
        return (String) get(1);
    }

    /**
     * Setter for <code>weather-dispatcher.WEATHER_COMMUNICATION.COUNTRY</code>.
     */
    public void setCountry(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>weather-dispatcher.WEATHER_COMMUNICATION.COUNTRY</code>.
     */
    public String getCountry() {
        return (String) get(2);
    }

    /**
     * Setter for <code>weather-dispatcher.WEATHER_COMMUNICATION.FOR_DATE</code>.
     */
    public void setForDate(LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for <code>weather-dispatcher.WEATHER_COMMUNICATION.FOR_DATE</code>.
     */
    public LocalDate getForDate() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for <code>weather-dispatcher.WEATHER_COMMUNICATION.REQUEST_TIMESTAMP</code>.
     */
    public void setRequestTimestamp(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>weather-dispatcher.WEATHER_COMMUNICATION.REQUEST_TIMESTAMP</code>.
     */
    public LocalDateTime getRequestTimestamp() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDate, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, String, String, LocalDate, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return WeatherCommunication.WEATHER_COMMUNICATION.ID;
    }

    @Override
    public Field<String> field2() {
        return WeatherCommunication.WEATHER_COMMUNICATION.CITY;
    }

    @Override
    public Field<String> field3() {
        return WeatherCommunication.WEATHER_COMMUNICATION.COUNTRY;
    }

    @Override
    public Field<LocalDate> field4() {
        return WeatherCommunication.WEATHER_COMMUNICATION.FOR_DATE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return WeatherCommunication.WEATHER_COMMUNICATION.REQUEST_TIMESTAMP;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCity();
    }

    @Override
    public String component3() {
        return getCountry();
    }

    @Override
    public LocalDate component4() {
        return getForDate();
    }

    @Override
    public LocalDateTime component5() {
        return getRequestTimestamp();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCity();
    }

    @Override
    public String value3() {
        return getCountry();
    }

    @Override
    public LocalDate value4() {
        return getForDate();
    }

    @Override
    public LocalDateTime value5() {
        return getRequestTimestamp();
    }

    @Override
    public WeatherCommunicationRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public WeatherCommunicationRecord value2(String value) {
        setCity(value);
        return this;
    }

    @Override
    public WeatherCommunicationRecord value3(String value) {
        setCountry(value);
        return this;
    }

    @Override
    public WeatherCommunicationRecord value4(LocalDate value) {
        setForDate(value);
        return this;
    }

    @Override
    public WeatherCommunicationRecord value5(LocalDateTime value) {
        setRequestTimestamp(value);
        return this;
    }

    @Override
    public WeatherCommunicationRecord values(Integer value1, String value2, String value3, LocalDate value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached WeatherCommunicationRecord
     */
    public WeatherCommunicationRecord() {
        super(WeatherCommunication.WEATHER_COMMUNICATION);
    }

    /**
     * Create a detached, initialised WeatherCommunicationRecord
     */
    public WeatherCommunicationRecord(Integer id, String city, String country, LocalDate forDate, LocalDateTime requestTimestamp) {
        super(WeatherCommunication.WEATHER_COMMUNICATION);

        set(0, id);
        set(1, city);
        set(2, country);
        set(3, forDate);
        set(4, requestTimestamp);
    }
}
